(window.webpackJsonp=window.webpackJsonp||[]).push([[2285],{2632:function(t,e,o){"use strict";o.r(e);var a=o(19),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"getting-started-with-objective-c-language"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#getting-started-with-objective-c-language"}},[t._v("#")]),t._v(" Getting started with Objective-C Language")]),t._v(" "),o("h2",{attrs:{id:"hello-world"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#hello-world"}},[t._v("#")]),t._v(" Hello World")]),t._v(" "),o("p",[t._v('This program will output "Hello World!"')]),t._v(" "),o("div",{staticClass:"language-objectivec extra-class"},[o("pre",{pre:!0,attrs:{class:"language-objectivec"}},[o("code",[o("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),o("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("import")]),t._v(" <Foundation/Foundation.h>")]),t._v("\n\n"),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Hello World!"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),o("p",[o("code",[t._v("#import")]),t._v(" is a pre-processor directive, which indicates we want to "),o("strong",[t._v("import")]),t._v(" or include the information from that file into the program. In this case, the compiler will copy the contents of "),o("code",[t._v("Foundation.h")]),t._v(" in the "),o("code",[t._v("Foundation")]),t._v(' framework to the top of the file.  The main difference between #import and #include is that #import is "smart" enough to not reprocess files that have already been included in other #includes.')]),t._v(" "),o("p",[t._v("The "),o("a",{attrs:{href:"http://stackoverflow.com/documentation/c/213/hello-world/795/hello-world",target:"_blank",rel:"noopener noreferrer"}},[t._v("C Language documentation"),o("OutboundLink")],1),t._v(" explains the "),o("code",[t._v("main")]),t._v(" function.")]),t._v(" "),o("p",[t._v("The "),o("code",[t._v("NSLog()")]),t._v(" function will print the string provided to the console, along with some debugging information. In this case, we use an Objective-C string literal: "),o("code",[t._v('@"Hello World!"')]),t._v(". In C, you would write this as "),o("code",[t._v('"Hello World!"')]),t._v(", however, Apple's Foundation Framework adds the "),o("code",[t._v("NSString")]),t._v(" class which provides a lot of useful functionality, and is used by NSLog. The simplest way to create an instance of "),o("code",[t._v("NSString")]),t._v(" is like this: "),o("code",[t._v('@"****string content here****"')]),t._v(".")]),t._v(" "),o("blockquote"),t._v(" "),o("p",[t._v("Technically, NSLog() is part of Apple's Foundation Framework and is not actually part of the Objective-C language.  However, the Foundation Framework is ubiquitous throughout Objective-C programming.  Since the Foundation Framework is not open-source and cannot be used outside of Apple development, there are open-source alternatives to the framework which are associated with "),o("a",{attrs:{href:"http://toastytech.com/guis/openstep.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("OPENStep"),o("OutboundLink")],1),t._v(" and "),o("a",{attrs:{href:"http://www.nongnu.org/gap/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GNUStep"),o("OutboundLink")],1),t._v(".")]),t._v(" "),o("h3",{attrs:{id:"compiling-the-program"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#compiling-the-program"}},[t._v("#")]),t._v(" Compiling the program")]),t._v(" "),o("p",[t._v("Assuming we want to compile our Hello World program, which consist of a single "),o("code",[t._v("hello.m")]),t._v(" file, the command to compile the executable is:")]),t._v(" "),o("div",{staticClass:"language-objectivec extra-class"},[o("pre",{pre:!0,attrs:{class:"language-objectivec"}},[o("code",[t._v("clang "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("framework Foundation hello"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o hello\n\n")])])]),o("p",[t._v("Then you can run it:")]),t._v(" "),o("div",{staticClass:"language-objectivec extra-class"},[o("pre",{pre:!0,attrs:{class:"language-objectivec"}},[o("code",[o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("hello\n\n")])])]),o("p",[t._v("This will output:")]),t._v(" "),o("div",{staticClass:"language-objectivec extra-class"},[o("pre",{pre:!0,attrs:{class:"language-objectivec"}},[o("code",[t._v("Hello World"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n\n")])])]),o("p",[t._v("The options are:")]),t._v(" "),o("li",[t._v("\n`-framework`: Specifies a framework to use to compile the program. Since this program uses Foundation, we include the Foundation framework.\n")]),t._v(" "),o("li",[t._v("\n`-o`: This option indicate to which file we'd like to output our program. In our case `hello`. If not specified, the default value is `a.out`.\n")])])}),[],!1,null,null,null);e.default=n.exports}}]);