(window.webpackJsonp=window.webpackJsonp||[]).push([[583],{929:function(t,a,e){"use strict";e.r(a);var s=e(19),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"multithreading"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#multithreading"}},[t._v("#")]),t._v(" Multithreading")]),t._v(" "),e("p",[t._v("In C11 there is a standard thread library, "),e("code",[t._v("<threads.h>")]),t._v(", but no known compiler that yet implements it. Thus, to use multithreading in C you must use platform specific implementations such as the POSIX threads library (often referred to as pthreads) using the "),e("code",[t._v("pthread.h")]),t._v(" header.")]),t._v(" "),e("h2",{attrs:{id:"c11-threads-simple-example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c11-threads-simple-example"}},[t._v("#")]),t._v(" C11 Threads simple example")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<threads.h>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world of C11 threads."')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    thrd_t thread"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("thrd_create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("thread"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("thrd_join")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("thread"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thread return %d at the end\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("h4",{attrs:{id:"syntax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),e("ul",[e("li",[t._v("thrd_t // Implementation-defined complete object type identifying a thread")]),t._v(" "),e("li",[t._v("int thrd_create( thrd_t *thr, thrd_start_t func, void *arg ); // Creates a thread")]),t._v(" "),e("li",[t._v("int thrd_equal( thrd_t thr0, thrd_t thr1 ); // Check if arguments refer to the same thread")]),t._v(" "),e("li",[t._v("thr_t thrd_current(void); // Returns identifier of the thread that calls it")]),t._v(" "),e("li",[t._v("int thrd_sleep( const struct timespec *duration, struct timespec *remaining ); // Suspend call thread execution for at least a given time")]),t._v(" "),e("li",[t._v("void thrd_yield(void); // Permit other threads to run instead of the thread that calls it")]),t._v(" "),e("li",[t._v("_Noreturn void thrd_exit( int res ); // Terminates the thread the thread that calls it")]),t._v(" "),e("li",[t._v("int thrd_detatch( thrd_t thr; // Detaches a given thread from the current environment")]),t._v(" "),e("li",[t._v("int thrd_join( thrd_t thr, int *res ); // Blocks the current thread until the given thread finishes")])]),t._v(" "),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),e("p",[t._v("Using threads can introduce extra undefined behavior such as a "),e("a",{attrs:{href:"https://stackoverflow.com/documentation/c/364/undefined-behavior/2622/data-race#t=201706130820201457052",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://stackoverflow.com/documentation/c/364/undefined-behavior/2622/data-race#t=201706130820201457052"),e("OutboundLink")],1),t._v(". For race-free access to variables that are shared between different threads C11 provides the "),e("code",[t._v("mtx_lock()")]),t._v(" mutex functionality or the (optional) "),e("a",{attrs:{href:"https://stackoverflow.com/documentation/c/4924/atomics#t=201706150835215525448",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://stackoverflow.com/documentation/c/4924/atomics#t=201706150835215525448"),e("OutboundLink")],1),t._v(" data-types and associated functions in "),e("code",[t._v("stdatomic.h")]),t._v(".")])])}),[],!1,null,null,null);a.default=n.exports}}]);