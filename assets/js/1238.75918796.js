(window.webpackJsonp=window.webpackJsonp||[]).push([[1238],{1584:function(e,t,s){"use strict";s.r(t);var a=s(19),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"web-development"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web-development"}},[e._v("#")]),e._v(" Web Development")]),e._v(" "),s("h2",{attrs:{id:"servant"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#servant"}},[e._v("#")]),e._v(" Servant")]),e._v(" "),s("p",[s("a",{attrs:{href:"http://haskell-servant.readthedocs.io/en/stable/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Servant"),s("OutboundLink")],1),e._v(" is a library for declaring APIs at the type-level and then:")]),e._v(" "),s("blockquote"),e._v(" "),s("ul",[e._v("\n- write servers (this part of servant can be considered a web framework),\n- obtain client functions (in haskell),\n- generate client functions for other programming languages,\n- generate documentation for your web applications\n- and more...\n")]),e._v(" "),s("p",[e._v("Servant has a concise yet powerful API. A simple API can be written in very few lines of code:")]),e._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("{-# LANGUAGE DataKinds #-}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("{-# LANGUAGE TypeOperators #-}")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token import_statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Data.Text")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token import_statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Data.Aeson.Types")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token import_statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" GHC.Generics")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token import_statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Servant.API")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("data")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("SortBy")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("Age")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("Name")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("data")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("User")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("User")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("name")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("age")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("Int")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("deriving")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("Eq")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("Show")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("Generic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("instance")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("ToJSON")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("User")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("-- automatically convert User to JSON")]),e._v("\n\n")])])]),s("p",[e._v("Now we can declare our API:")]),e._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("UserAPI")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"users"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":>")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("QueryParam")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sortby"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("SortBy")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":>")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("Get")]),e._v(" '"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\n")])])]),s("p",[e._v("which states that we wish to expose "),s("code",[e._v("/users")]),e._v(" to "),s("code",[e._v("GET")]),e._v(" requests with a query param "),s("code",[e._v("sortby")]),e._v(" of type "),s("code",[e._v("SortBy")]),e._v(" and return JSON of type "),s("code",[e._v("User")]),e._v(" in the response.")]),e._v(" "),s("p",[e._v("Now we can define our handler:")]),e._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("-- This is where we'd return our user data, or e.g. do a database lookup")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("server")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("Server")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("UserAPI")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("server")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("return")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("User")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Alex"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("31")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("userAPI")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("Proxy")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("UserAPI")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("userAPI")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("Proxy")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("app1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("Application")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("app1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("serve")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("userAPI")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("server")]),e._v("\n\n")])])]),s("p",[e._v("And the main method which listens on port "),s("code",[e._v("8081")]),e._v(" and serves our user API:")]),e._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("main")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("IO")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("main")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("run")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8081")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("app1")]),e._v("\n\n")])])]),s("p",[e._v("Note, "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/haskell/2970/stack#t=201607301149344784488",target:"_blank",rel:"noopener noreferrer"}},[e._v("Stack"),s("OutboundLink")],1),e._v(" has a template for generating basic APIs in Servant, which is useful for getting up and running very quick.")]),e._v(" "),s("h2",{attrs:{id:"yesod"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yesod"}},[e._v("#")]),e._v(" Yesod")]),e._v(" "),s("p",[e._v("Yesod project can be created with "),s("code",[e._v("stack new")]),e._v(" using following templates:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("yesod-minimal")]),e._v(". Simplest Yesod scaffold possible.")]),e._v(" "),s("li",[s("code",[e._v("yesod-mongo")]),e._v(". Uses MongoDB as DB engine.")]),e._v(" "),s("li",[s("code",[e._v("yesod-mysql")]),e._v(". Uses MySQL as DB engine.")]),e._v(" "),s("li",[s("code",[e._v("yesod-postgres")]),e._v(". Uses PostgreSQL as DB engine.")]),e._v(" "),s("li",[s("code",[e._v("yesod-postgres-fay")]),e._v(". Uses PostgreSQL as DB engine. Uses Fay language for front-end.")]),e._v(" "),s("li",[s("code",[e._v("yesod-simple")]),e._v(". Recommended template to use, if you don't need database.")]),e._v(" "),s("li",[s("code",[e._v("yesod-sqlite")]),e._v(". Uses SQlite as DB engine.")])]),e._v(" "),s("p",[s("code",[e._v("yesod-bin")]),e._v(" package provides "),s("code",[e._v("yesod")]),e._v(" executable, which can be used to run development server. Note that you also can run your application directly, so "),s("code",[e._v("yesod")]),e._v(" tool is optional.")]),e._v(" "),s("p",[s("code",[e._v("Application.hs")]),e._v(" contains code that dispatches requests between handlers. It also sets up database and logging settings, if you used them.")]),e._v(" "),s("p",[s("code",[e._v("Foundation.hs")]),e._v(" defines "),s("code",[e._v("App")]),e._v(" type, that can be seen as an environment for all handlers. Being in "),s("code",[e._v("HandlerT")]),e._v(" monad, you can get this value using "),s("code",[e._v("getYesod")]),e._v(" function.")]),e._v(" "),s("p",[s("code",[e._v("Import.hs")]),e._v(" is a module that just re-exports commonly used stuff.")]),e._v(" "),s("p",[s("code",[e._v("Model.hs")]),e._v(" contains Template Haskell that generates code and data types used for DB interaction. Present only if you are using DB.")]),e._v(" "),s("p",[s("code",[e._v("config/models")]),e._v(" is where you define your DB schema. Used by "),s("code",[e._v("Model.hs")]),e._v(".")]),e._v(" "),s("p",[s("code",[e._v("config/routes")]),e._v(" defines URI's of the Web application. For each HTTP method of the route, you'd need to create a handler named "),s("code",[e._v("{method}{RouteR}")]),e._v(".")]),e._v(" "),s("p",[s("code",[e._v("static/")]),e._v(" directory contains site's static resources. These get compiled into binary by "),s("code",[e._v("Settings/StaticFiles.hs")]),e._v(" module.")]),e._v(" "),s("p",[s("code",[e._v("templates/")]),e._v(" directory contains "),s("a",{attrs:{href:"https://hackage.haskell.org/package/shakespeare",target:"_blank",rel:"noopener noreferrer"}},[e._v("Shakespeare"),s("OutboundLink")],1),e._v(" templates that are used when serving requests.")]),e._v(" "),s("p",[e._v("Finally, "),s("code",[e._v("Handler/")]),e._v(" directory contains modules that define handlers for routes.")]),e._v(" "),s("p",[e._v("Each handler is a "),s("code",[e._v("HandlerT")]),e._v(" monad action based on IO. You can inspect request parameters, its body and other information, make queries to the DB with "),s("code",[e._v("runDB")]),e._v(", perform arbitrary IO and return various types of content to the user. To serve HTML, "),s("code",[e._v("defaultLayout")]),e._v(" function is used that allows neat composition of shakespearian templates.")])])}),[],!1,null,null,null);t.default=n.exports}}]);