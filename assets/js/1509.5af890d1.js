(window.webpackJsonp=window.webpackJsonp||[]).push([[1509],{1856:function(t,s,e){"use strict";e.r(s);var a=e(19),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"xctest-framework-unit-testing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xctest-framework-unit-testing"}},[t._v("#")]),t._v(" XCTest framework - Unit Testing")]),t._v(" "),e("h2",{attrs:{id:"adding-test-files-to-xcode-project"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adding-test-files-to-xcode-project"}},[t._v("#")]),t._v(" Adding Test Files to Xcode Project")]),t._v(" "),e("h3",{attrs:{id:"when-creating-the-project"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#when-creating-the-project"}},[t._v("#")]),t._v(" When creating the project")]),t._v(" "),e("p",[t._v('You should check "Include Unit Tests" in the project creation dialog.')]),t._v(" "),e("p",[e("a",{attrs:{href:"https://i.stack.imgur.com/NK7fQ.png",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://i.stack.imgur.com/NK7fQ.png",alt:"enter image description here"}}),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"after-creating-the-project"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#after-creating-the-project"}},[t._v("#")]),t._v(" After creating the project")]),t._v(" "),e("p",[t._v("If you missed checking that item while creating your project, you could always add test files later. To do so:")]),t._v(" "),e("p",[t._v("1- Go to your project settings in Xcode")]),t._v(" "),e("p",[t._v('2- Go to "Targets"')]),t._v(" "),e("p",[t._v('3- Click "Add Target"')]),t._v(" "),e("p",[t._v('4- Under "Other", select "Cocoa Touch Unit Test Testing Bundle"')]),t._v(" "),e("p",[t._v("At the end, you should have a file named "),e("code",[t._v("[Your app name]Tests.swift")]),t._v(". In Objective-C, you should have two files named "),e("code",[t._v("[Your app name]Tests.h")]),t._v(" and "),e("code",[t._v("[Your app name]Tests.m")]),t._v(" instead.")]),t._v(" "),e("p",[e("code",[t._v("[Your app name]Tests.swift or .m")]),t._v(" file will include by default :")]),t._v(" "),e("ul",[e("li",[t._v("A "),e("code",[t._v("XCTest")]),t._v(" module import")]),t._v(" "),e("li",[t._v("A "),e("code",[t._v("[Your app name]Tests")]),t._v(" class which extends "),e("code",[t._v("XCTestCase")])]),t._v(" "),e("li",[e("code",[t._v("setUp")]),t._v(", "),e("code",[t._v("tearDown")]),t._v(", "),e("code",[t._v("testExample")]),t._v(", "),e("code",[t._v("testPerformanceExample")]),t._v(" methods")])]),t._v(" "),e("h3",{attrs:{id:"swift"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#swift"}},[t._v("#")]),t._v(" Swift")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("XCTest")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyProjectTests")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("XCTestCase")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Put setup code here. This method is called before the invocation of each test method in the class.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tearDown")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Put teardown code here. This method is called after the invocation of each test method in the class.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tearDown")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("testExample")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is an example of a functional test case.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use XCTAssert and related functions to verify your tests produce the correct results.")]),t._v("\n    \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("testPerformanceExample")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is an example of a performance test case.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("measure "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Put the code you want to measure the time of here.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("h3",{attrs:{id:"objective-c"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#objective-c"}},[t._v("#")]),t._v(" Objective-C")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[t._v("#"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("XCTest")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("XCTest")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n@interface "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyProjectTests")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("XCTestCase")]),t._v("\n\n@end\n\n@implementation "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("MyProjectTests")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setUp "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" setUp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Put setup code here. This method is called before the invocation of each test method in the class.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("tearDown "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Put teardown code here. This method is called after the invocation of each test method in the class.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" tearDown"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("testExample "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is an example of a functional test case.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use XCTAssert and related functions to verify your tests produce the correct results.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("testPerformanceExample "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is an example of a performance test case.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" measureBlock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Put the code you want to measure the time of here.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n@end\n\n")])])]),e("h2",{attrs:{id:"adding-test-methods"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adding-test-methods"}},[t._v("#")]),t._v(" Adding test methods")]),t._v(" "),e("p",[t._v("According to Apple:")]),t._v(" "),e("blockquote"),t._v(" "),e("h3",[t._v("Test Methods")]),t._v("\nA test method is an instance method of a test class that begins with the prefix test, takes no parameters, and returns void, for example, (void)testColorIsRed(). A test method exercises code in your project and, if that code does not produce the expected result, reports failures using a set of assertion APIs. For example, a function’s return value might be compared against an expected value or your test might assert that improper use of a method in one of your classes throws an exception.\n"),e("p",[t._v('So we add a test method using "test" as the prefix of the method, like:')]),t._v(" "),e("h3",{attrs:{id:"swift-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#swift-2"}},[t._v("#")]),t._v(" Swift")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("testSomething")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("h3",{attrs:{id:"objective-c-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#objective-c-2"}},[t._v("#")]),t._v(" Objective-C")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("testSomething "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("To actually test the results, we use "),e("code",[t._v("XCTAssert()")]),t._v(" method, which takes a boolean expression, and if true, marks the test as succeeded, else it will mark it as failed.")]),t._v(" "),e("p",[t._v("Let's say we have a method in View Controller class called "),e("code",[t._v("sum()")]),t._v(" which calculates sum of two numbers. To test it, we use this method:")]),t._v(" "),e("h3",{attrs:{id:"swift-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#swift-3"}},[t._v("#")]),t._v(" Swift")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("testSum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" viewController"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" and"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("XCTAssertEqual")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("h3",{attrs:{id:"objective-c-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#objective-c-3"}},[t._v("#")]),t._v(" Objective-C")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("testSum "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    int result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("viewController sum"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" and"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("XCTAssertEqual")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("blockquote"),t._v(" "),e("h3",[t._v("Note")]),t._v("\nBy default, you can't access label, text box or other UI items of the View Controller class from test class if they are first made in Storyboard file. This is because they are initialized in `loadView()` method of the View Controller class, and this will not be called when testing. The best way to call `loadView()` and all other required methods is accessing the `view` property of our `viewController` property. You should add this line before testing UI elements:\n"),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("XCTAssertNotNil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("viewController"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("view"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"writing-a-test-class"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#writing-a-test-class"}},[t._v("#")]),t._v(" Writing a test class")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("XCTest")]),t._v("\n@testable "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("PersonApp")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PersonTests")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("XCTestCase")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_completeName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("firstName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Josh"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Brown"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("XCTAssertEqual")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Josh Brown"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("Now let's discuss what's going on here. The "),e("code",[t._v("import XCTest")]),t._v(" line will allow us to extend "),e("code",[t._v("XCTestCase")]),t._v(" and use "),e("code",[t._v("XCTAssertEqual")]),t._v(" (among other assertions). Extending "),e("code",[t._v("XCTestCase")]),t._v(" and prefixing our test name with "),e("code",[t._v("test")]),t._v(" will ensure that Xcode automatically runs this test when running the tests in the project ("),e("strong",[t._v("⌘U")]),t._v(" or "),e("strong",[t._v("Product")]),t._v(" > "),e("strong",[t._v("Test")]),t._v("). The "),e("code",[t._v("@testable import PersonApp")]),t._v(" line will import our "),e("code",[t._v("PersonApp")]),t._v(" target so we can test and use classes from it, such as the "),e("code",[t._v("Person")]),t._v(" in our example above. And finally, our "),e("code",[t._v("XCTAssertEqual")]),t._v(" will ensure that "),e("code",[t._v("person.completeName()")]),t._v(" is equal to the string "),e("code",[t._v('"Josh Brown"')]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"adding-storyboard-and-view-controller-as-instances-to-test-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adding-storyboard-and-view-controller-as-instances-to-test-file"}},[t._v("#")]),t._v(" Adding Storyboard and View Controller as instances to test file")]),t._v(" "),e("p",[t._v("To get started with unit testing, which will be done in the tests file and will be testing the View Controller and Storyboard, we should introduce these two files to the test file.")]),t._v(" "),e("h3",{attrs:{id:"defining-the-view-controller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#defining-the-view-controller"}},[t._v("#")]),t._v(" Defining the View Controller")]),t._v(" "),e("h3",{attrs:{id:"swift-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#swift-4"}},[t._v("#")]),t._v(" Swift")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" viewController "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ViewController")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n\n")])])]),e("h3",{attrs:{id:"introducing-the-storyboard-and-initializing-the-view-controller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introducing-the-storyboard-and-initializing-the-view-controller"}},[t._v("#")]),t._v(" Introducing the Storyboard and initializing the View Controller")]),t._v(" "),e("p",[t._v("Add this code to the "),e("code",[t._v("setUp()")]),t._v(" method:")]),t._v(" "),e("h3",{attrs:{id:"swift-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#swift-5"}},[t._v("#")]),t._v(" Swift")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" storyboard "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("UIStoryboard")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Main"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bundle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("nil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nviewController "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" storyboard"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("instantiateInitialViewController")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ViewController")]),t._v("\n\n")])])]),e("h3",{attrs:{id:"objective-c-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#objective-c-4"}},[t._v("#")]),t._v(" Objective-C")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("UIStoryboard")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("storyboard "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("UIStoryboard")]),t._v(" storyboardWithName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Main"')]),t._v(" bundle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("nil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nviewController "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ViewController")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("storyboard instantiateInitialViewController"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("This way, you could write test methods, and they will know where to check for errors. In this case, there are View Controller and the Storyboard.")]),t._v(" "),e("h2",{attrs:{id:"start-testing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start-testing"}},[t._v("#")]),t._v(" Start Testing")]),t._v(" "),e("h3",{attrs:{id:"testing-a-specific-method"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#testing-a-specific-method"}},[t._v("#")]),t._v(" Testing a specific method")]),t._v(" "),e("p",[t._v("To test a specific method, click the square next to the method definition.")]),t._v(" "),e("h3",{attrs:{id:"testing-all-methods"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#testing-all-methods"}},[t._v("#")]),t._v(" Testing all methods")]),t._v(" "),e("p",[t._v("To test all methods, click the square next to the class definition.")]),t._v(" "),e("h3",{attrs:{id:"see-the-testing-result"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#see-the-testing-result"}},[t._v("#")]),t._v(" See the testing result")]),t._v(" "),e("p",[t._v("If there is a green check next to the definition, the test has succeeded.")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://i.stack.imgur.com/3OKdN.png",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://i.stack.imgur.com/3OKdN.png",alt:"enter image description here"}}),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("If there is a red cross next to the definition, the test has failed.")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://i.stack.imgur.com/2cpht.png",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://i.stack.imgur.com/2cpht.png",alt:"enter image description here"}}),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"running-all-tests"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#running-all-tests"}},[t._v("#")]),t._v(" Running all tests")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Product")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Test")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OR")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Cmd")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" U\n\n")])])]),e("p",[t._v("It will run all the tests from all the test targets!")]),t._v(" "),e("h2",{attrs:{id:"import-a-module-that-it-can-be-tested"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#import-a-module-that-it-can-be-tested"}},[t._v("#")]),t._v(" Import a module that it can be tested")]),t._v(" "),e("p",[t._v("Classes, structs, enums and all their methods are "),e("code",[t._v("internal")]),t._v(" by default. This means they can be only accessed from the same module. The test cases are in a different target an this means they are in a different module. To be able to access the method you want to test, you need to import the module to be tested using the "),e("code",[t._v("@testable")]),t._v(" keyword.")]),t._v(" "),e("p",[t._v("Let's say we have a main module called "),e("code",[t._v("ToDo")]),t._v(" and we want to write tests for it. We would import that module like this:")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[t._v("@testable "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ToDo")]),t._v("\n\n")])])]),e("p",[t._v("All test methods in the file with this import statement can now access all "),e("code",[t._v("internal")]),t._v(" classes, structs, enums and all their "),e("code",[t._v("internal")]),t._v(" methods of the "),e("code",[t._v("ToDo")]),t._v(" module.")]),t._v(" "),e("p",[t._v("You should never add the files with the elements you want to test to the test target because that can lead to hard to debug errors.")]),t._v(" "),e("h2",{attrs:{id:"trigger-view-loading-and-appearance"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#trigger-view-loading-and-appearance"}},[t._v("#")]),t._v(" Trigger view loading and appearance")]),t._v(" "),e("h3",{attrs:{id:"view-loading"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#view-loading"}},[t._v("#")]),t._v(" View loading")]),t._v(" "),e("p",[t._v("In a test for a view controller you want sometimes to trigger the execution of "),e("code",[t._v("loadView()")]),t._v(" or "),e("code",[t._v("viewDidLoad()")]),t._v(". This can be done by accessing the view. Let's say you have view controller instance in your test called "),e("code",[t._v("sut")]),t._v(" (system under test), then the code would look like this:")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("XCTAssertNotNil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sut"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("view"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("h3",{attrs:{id:"view-appearance"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#view-appearance"}},[t._v("#")]),t._v(" View appearance")]),t._v(" "),e("p",[t._v("You can also trigger the methods "),e("code",[t._v("viewWillAppear(_:)")]),t._v(" and "),e("code",[t._v("viewDidAppear(_:)")]),t._v(" by adding the following code:")]),t._v(" "),e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[t._v("sut"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginAppearanceTransition")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" animated"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsut"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("endAppearanceTransition")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);