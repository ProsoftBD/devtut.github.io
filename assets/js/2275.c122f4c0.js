(window.webpackJsonp=window.webpackJsonp||[]).push([[2275],{2621:function(e,a,n){"use strict";n.r(a);var o=n(19),s=Object(o.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"bool-bool-boolean-nscfboolean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bool-bool-boolean-nscfboolean"}},[e._v("#")]),e._v(" BOOL / bool / Boolean / NSCFBoolean")]),e._v(" "),n("h2",{attrs:{id:"bool-boolean-bool-nscfboolean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bool-boolean-bool-nscfboolean"}},[e._v("#")]),e._v(" BOOL/Boolean/bool/NSCFBoolean")]),e._v(" "),n("ol",[n("li",[e._v("bool is a datatype defined in C99.\n")]),n("li",[e._v("Boolean values are used in conditionals, such as if or while\nstatements, to conditionally perform logic or repeat execution. When\nevaluating a conditional statement, the value 0 is considered\n“false”, while any other value is considered “true”. Because NULL\nand nil are defined as 0, conditional statements on these\nnonexistent values are also evaluated as “false”.")]),e._v(" "),n("li",[e._v("BOOL is an Objective-C type defined as signed char with the macros\nYES and NO to represent true and false")])]),e._v(" "),n("p",[e._v("From the definition in objc.h:")]),e._v(" "),n("div",{staticClass:"language-objectivec extra-class"},[n("pre",{pre:!0,attrs:{class:"language-objectivec"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[e._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("if")]),e._v(" (TARGET_OS_IPHONE && __LP64__)  ||  TARGET_OS_WATCH")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("typedef")]),e._v(" bool BOOL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[e._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("else")])]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("typedef")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("signed")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("char")]),e._v(" BOOL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// BOOL is explicitly signed so @encode(BOOL) == "c" rather than "C" ')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// even if -funsigned-char is used.")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[e._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("endif")])]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[e._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("define")]),e._v(" YES ((BOOL)1)")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[e._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("define")]),e._v(" NO  ((BOOL)0)")]),e._v("\n\n")])])]),n("li",[e._v("NSCFBoolean is a private class in the NSNumber class cluster. It is\na bridge to the CFBooleanRef type, which is used to wrap boolean\nvalues for Core Foundation property lists and collections. CFBoolean\ndefines the constants kCFBooleanTrue and kCFBooleanFalse. Because\nCFNumberRef and CFBooleanRef are different types in Core Foundation,\nit makes sense that they are represented by different bridging\nclasses in NSNumber.")]),e._v(" "),n("h2",{attrs:{id:"bool-vs-boolean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bool-vs-boolean"}},[e._v("#")]),e._v(" BOOL VS Boolean")]),e._v(" "),n("p",[n("strong",[e._v("BOOL")])]),e._v(" "),n("li",[e._v("Apple's Objective-C frameworks and most Objective-C/Cocoa code uses"),n("br"),e._v("\nBOOL.")]),e._v("\n- Use BOOL in objective-C, when dealing with any CoreFoundation    APIs\n"),n("p",[n("strong",[e._v("Boolean")])]),e._v(" "),n("ul",[n("li",[e._v("Boolean is an old Carbon keyword , defined as an unsigned char")])])])}),[],!1,null,null,null);a.default=s.exports}}]);